// Created 12/24/22



use std::{io, thread, time::Duration};
use clap::*;
use rand::Rng;



fn main() {

    let matches = Command::new("MyApp")
        .about("When given a reproduce_chance, has a chance to run itself twice with the same reproduce_chance. If it's over 50%, this could freeze your computer.")
        .arg(
            arg!(-r --reproduce_chance <PERCENT> "How likely it is for the program to create 2 copies of itself")
                .value_parser(value_parser!(u16))
                .required(false)
        )
        .get_matches();

    'a: {match matches.get_one::<u16>("reproduce_chance") {
        Some(&chance) => {
            let mut rng = rand::thread_rng();
            if rng.gen::<f64>() < (chance as f64 / 100.) {
                run(chance);
            }
        }
        None => {
            println!("What percent do you want to use? (IF UNSURE, PLEASE RUN AGAIN WITH --help)");
            let chance = get_string().unwrap();
            if chance.is_empty() {
                run(49);
                break 'a;
            }
            let chance = chance.parse::<u16>().expect("Input cannot be cast to u8.");
            run(chance);
        }
    }}

    //io::stdin().read_line(&mut String::new());
    thread::sleep(Duration::from_secs(1));

}



fn run (chance: u16) {
    std::process::Command::new("fun_malware")
        .arg("-r")
        .arg(&(chance - 1).to_string())
        .output()
        .expect("failed to execute process");
    std::process::Command::new("fun_malware")
        .arg("-r")
        .arg(&(chance - 1).to_string())
        .output()
        .expect("failed to execute process");
}



fn get_string() -> Result<String, Box<dyn std::error::Error>> {
    let mut input_string = String::new();
    io::stdin().read_line(&mut input_string)?;
    input_string = input_string[..input_string.len()-2].to_string();
    Ok(input_string)
}
